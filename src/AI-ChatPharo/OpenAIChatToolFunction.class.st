Class {
	#name : 'OpenAIChatToolFunction',
	#superclass : 'Object',
	#instVars : [
		'name',
		'description',
		'block',
		'parameters'
	],
	#category : 'AI-ChatPharo-OpenAI',
	#package : 'AI-ChatPharo',
	#tag : 'OpenAI'
}

{ #category : 'instance creation' }
OpenAIChatToolFunction class >> name: functionName description: description parameters: parameters block: block [

	^ self basicNew
		initializeWithName: functionName description: description parameters: parameters block: block;
		yourself

]

{ #category : 'examples' }
OpenAIChatToolFunction class >> toolEvaluateExpression [

	<sampleInstance>
	
	^ self name: 'evaluate_expression'
		description: 'Evaluates a Smalltalk expression in the user''s Pharo image.'
		parameters: (Dictionary
			with: 'type' -> 'object'
			with: 'properties' -> (Dictionary
				with: 'expression' -> (Dictionary
					with: 'type' -> 'string'
					with: 'description' -> 'The Smalltalk expression to evaluate'))
			with: 'required' -> #('expression'))
		block: [ :arguments |
			| expression result value |
			expression := arguments at: 'expression'.
			[ :exitBlock |
				[ OCParser parseExpression: expression ] on: OCCodeError do: [ :error |
					result := Dictionary with: 'syntax_error' -> ('Syntax error in given expression at position {1}: {2}' format:
						{ error position. error messageText }).
					exitBlock value ].
				[ value := Smalltalk compiler evaluate: expression ] on: Error do: [ :error |
					result := Dictionary with: 'evaluation_error' -> error asString.
					exitBlock value ].
				result := Dictionary with: 'value' -> value asString
			] valueWithExit.
			result ]
]

{ #category : 'examples' }
OpenAIChatToolFunction class >> toolGetCurrentWeather [

	<sampleInstance>
	
	| weatherDataPerCity |
	
	weatherDataPerCity := Dictionary with: 'Paris' ->
		(Dictionary with: 'degrees_centigrade' -> 10 with: 'precipitation' -> 'rain').
	^ self name: 'get_current_weather'
		description: 'Get the current weather for a city.'
		parameters: (Dictionary
			with: 'type' -> 'object'
			with: 'properties' -> (Dictionary
				with: 'city' -> (Dictionary
					with: 'type' -> 'string'
					with: 'description' -> 'The name of the city'))
			with: 'required' -> #('city'))
		block: [ :arguments | 
			(arguments at: 'city') in: [ :city |
				weatherDataPerCity at: city ifAbsent: [
					Dictionary with: 'error' -> ('No weather data available for ' , city) ] ] ]
]

{ #category : 'examples' }
OpenAIChatToolFunction class >> toolOpenPlayground [

	<sampleInstance>
	
	^ self name: 'open_playground'
		description: (' ' join: #('Opens a Pharo Playground with the given Smalltalk code in the user''s image so that the user'
			'can edit and execute the code. As this opens another window, use only when sure it''s what the user intended,'
			'or ask first. Use this to give code examples. If the code has a syntax error, the error is reported to you and'
			'no Playground is opened.'))
		parameters: (Dictionary
			with: 'type' -> 'object'
			with: 'properties' -> (Dictionary
				with: 'code' -> (Dictionary
					with: 'type' -> 'string'
					with: 'description' -> 'The Pharo Smalltalk code for the Playground'))
			with: 'required' -> #('code'))
		block: [ :arguments | 
			| code result |
			code := arguments at: 'code'.
			[ :exitBlock |
				[ OCParser parseExpression: code ] on: OCCodeError do: [ :error |
					result := Dictionary with: 'syntax_error' -> ('Syntax error in given code at position {1}: {2}' format:
						{ error position. error messageText }).
					exitBlock value ].
				StPlayground openContents: code.
				result := Dictionary with: 'playground_opened' -> true
			] valueWithExit.
			result ]
]

{ #category : 'applying' }
OpenAIChatToolFunction >> applyTo: arguments [

	^ block value: arguments
]

{ #category : 'accessing' }
OpenAIChatToolFunction >> block [

	^ block
]

{ #category : 'accessing' }
OpenAIChatToolFunction >> description [

	^ description
]

{ #category : 'initialization' }
OpenAIChatToolFunction >> initializeWithName: initialName description: initialDescription parameters: initialParameters block: initialBlock [

	self initialize.
	name := initialName.
	description := initialDescription.
	parameters := initialParameters.
	block := initialBlock.

]

{ #category : 'accessing' }
OpenAIChatToolFunction >> name [

	^ name
]

{ #category : 'openAI API' }
OpenAIChatToolFunction >> openAIChatTool [

	^ Dictionary
		with: 'type' -> 'function'
		with: 'function' -> (Dictionary
			with: 'name' -> name
			with: 'description' -> description
			with: 'parameters' -> parameters)
]

{ #category : 'accessing' }
OpenAIChatToolFunction >> parameters [

	^ parameters
]
